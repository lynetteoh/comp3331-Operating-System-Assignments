/*
 * Declarations for file handle and file table management.
 */

#ifndef _FILE_H_
#define _FILE_H_

/*
 * Contains some file-related maximum length constants
 */
#include <limits.h>

#define INT_MIN -2147483648
/*
 * Put your function declarations and data types here ...
 */


//one open file entry
struct open_file_table_entry{
    struct vnode *vn_ptr;   // pointer to vnode
    off_t offset;           //the position in the file to start reading
    int open_count;           //number of references to this file descriptor
    int flag;               //indicate the mode of the file, ie, read only, write only, etc           
};

//global open file table
struct open_file_table{
    struct lock *lock_table;    //lock to lock the table 
    struct open_file_table_entry of_entry[OPEN_MAX];    //open_file_table entry
};

//pointer to open file table
struct open_file_table *of_table;

int fdtable_bootstrap(void);
int oftable_bootstrap(void);
int file_open(char *filename,int flag, mode_t mode, int *fd);
int sys_open(userptr_t filename,int flag, mode_t mode, int *fd);
int sys_write(int fileDescriptor, userptr_t buffer, size_t length, int *size);
int sys_read(int fileDescriptor, userptr_t buffer, size_t length, int *size);
int sys_close(int fileDescriptor);
int sys_lseek(int fileDescriptor, off_t position, int whence, off_t *offset);
int sys_dup2(int fileDescriptor, int newFD, int* fd);
#endif /* _FILE_H_ */
